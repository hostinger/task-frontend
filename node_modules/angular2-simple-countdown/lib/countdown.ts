import { Component, Input } from '@angular/core';

@Component({
    selector: 'count-down',
    template:
        `
        <div class="container" id="wrapper" style="min-width: 240px;">
            <div class="row" style="display: flex; flex-direction: row; justify-content: space-around;">
                <div class="col-2" style="margin: 10px; display: flex; flex-direction: column;
                    justify-content: center; align-items: center;">
                    <div class="row">
                        <h3
                            style="font-family: 'Open Sans', sans-serif; font-weight: 900;">
                            {{ this.days }}
                        </h3>
                    </div>
                    <div class="row">
                        <p style="font-family: 'Open Sans', sans-serif; font-weight: 900; font-size: .7rem;">days</p>
                    </div>
                </div>
                <div class="col-2" style="margin: 10px; display: flex; flex-direction: column;
                    justify-content: center; align-items: center;">
                    <div class="row">
                        <h3
                            style="font-family: 'Open Sans', sans-serif; font-weight: 900;">
                            {{ this.hours }}
                        </h3>
                    </div>
                    <div class="row">
                        <p style="font-family: 'Open Sans', sans-serif; font-weight: 900; font-size: .7rem;">hours</p>
                    </div>
                </div>
                <div class="col-2" style="margin: 10px; display: flex; flex-direction: column;
                    justify-content: center; align-items: center;">
                    <div class="row">
                        <h3
                            style="font-family: 'Open Sans', sans-serif; font-weight: 900;">
                            {{ this.minutes }}
                        </h3>
                    </div>
                    <div class="row">
                        <p style="font-family: 'Open Sans', sans-serif; font-weight: 900; font-size: .7rem;">minutes</p>
                    </div>
                </div>
                <div class="col-2" style="margin: 10px; display: flex; flex-direction: column;
                    justify-content: center; align-items: center;">
                    <div class="row">
                        <h3
                            style="font-family: 'Open Sans', sans-serif; font-weight: 900;">
                            {{ this.seconds }}
                        </h3>
                    </div>
                    <div class="row">
                        <p style="font-family: 'Open Sans', sans-serif; font-weight: 900; font-size: .7rem;">seconds</p>
                    </div>
                </div>
            </div>
        </div>
        <ng-content></ng-content>
        `
    })

export class CountDownComponent {
    @Input() units: any;
    @Input() end: any;
    @Input() displayString = '';
    @Input() days = '';
    @Input() hours = '';
    @Input() minutes = '';
    @Input() seconds = '';
    @Input() text: any;

    constructor() {
        setInterval(() => this._displayString(), 1);
    }

    _displayString() {

        if (typeof this.units === 'string') {
            this.units = this.units.split('|');
        }

        const givenDate: any = new Date(this.end);
        const now: any = new Date();

        const dateDifference: any = givenDate - now;
        const lastUnit = this.units[this.units.length - 1];
        const unitConstantForMillisecs = {
            weeks: (1000 * 60 * 60 * 24 * 7),
            days: (1000 * 60 * 60 * 24),
            hours: (1000 * 60 * 60),
            minutes: (1000 * 60),
            seconds: 1000,
            milliseconds: 1
        };
        const unitsLeft = {};
        let returnString = '';
        let totalMillisecsLeft = dateDifference,
            i,
            unit: any;
        for (i in this.units) {
            if (this.units.hasOwnProperty(i)) {

                unit = this.units[i].trim();
                if (unitConstantForMillisecs[unit.toLowerCase()] === false) {
                    // $interval.cancel(countDownInterval);
                    throw new Error('Cannot repeat unit: ' + unit);

                }
                if (unitConstantForMillisecs.hasOwnProperty(unit.toLowerCase()) === false) {
                    throw new Error(`Unit: ' + unit + ' is not supported. Please use following units:
                        weeks, days, hours, minutes, seconds, milliseconds`);
                }

                unitsLeft[unit] = totalMillisecsLeft / unitConstantForMillisecs[unit.toLowerCase()];

                if (lastUnit === unit) {
                    unitsLeft[unit] = Math.ceil(unitsLeft[unit]);
                } else {
                    unitsLeft[unit] = Math.floor(unitsLeft[unit]);
                }
                totalMillisecsLeft -= unitsLeft[unit] * unitConstantForMillisecs[unit.toLowerCase()];
                unitConstantForMillisecs[unit.toLowerCase()] = false;


                returnString += ' ' + unitsLeft[unit] + ' ' + unit;
            }
        }

        if (this.text !== null) {
            this.text = {
                'Weeks': '',
                'Days': '', '': '',
                'Hours': '',
                'Minutes': '', 'Seconds': '',
                'MilliSeconds': ''
            };
        }


        this.displayString = returnString
            .replace('Weeks', this.text.Weeks)
            .replace('Days', this.text.Days)
            .replace('Hours', this.text.Hours)
            .replace('Minutes', this.text.Minutes)
            .replace('Seconds', this.text.Seconds)
            .replace('Milliseconds', this.text.MilliSeconds);

        this.days = this.displayString.slice(0, 2);
        this.hours = this.displayString.slice(3, 6);
        this.minutes = this.displayString.slice(7, 10);
        this.seconds = this.displayString.slice(11, 14);

        // console.log(`${this.days} days / ${this.hours} hours : ${this.minutes} minutes : ${this.seconds} seconds`);
        // console.log(this.displayString);
    }
}
